class Pranav {
    Node head;

    class Node {
        int data;
        Node next;
        Node prev;

        Node(int data) {
            this.data = data;
        }
    }

    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            newNode.next = newNode.prev = newNode;
            head = newNode;
        } else {
            Node tail = head.prev;

            tail.next = newNode;
            newNode.prev = tail;
            newNode.next = head;
            head.prev = newNode;
        }
    }

    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            newNode.next = newNode.prev = newNode;
            head = newNode;
        } else {
            Node tail = head.prev;

            newNode.next = head;
            newNode.prev = tail;
            head.prev = newNode;
            tail.next = newNode;

            head = newNode;
        }
    }

    public void insertAtMiddle(int data, int pos) {
        if (head == null || pos <= 1) {
            insertAtBeginning(data);
            return;
        }

        Node newNode = new Node(data);
        Node temp = head;

        for (int i = 1; i < pos - 1 && temp.next != head; i++) {
            temp = temp.next;
        }

        newNode.next = temp.next;
        newNode.prev = temp;

        temp.next.prev = newNode;
        temp.next = newNode;
    }

    public void deleteAtEnd() {
        if (head == null) return;

        if (head.next == head) {
            head = null;
        } else {
            Node tail = head.prev;
            Node newTail = tail.prev;

            newTail.next = head;
            head.prev = newTail;
        }
    }

    public void deleteAtBeginning() {
        if (head == null) return;

        if (head.next == head) {
            head = null;
        } else {
            Node tail = head.prev;
            head = head.next;
            head.prev = tail;
            tail.next = head;
        }
    }

    public void deleteAtMiddle(int pos) {
        if (head == null || pos <= 1) {
            deleteAtBeginning();
            return;
        }

        Node temp = head;

        for (int i = 1; i < pos && temp.next != head; i++) {
            temp = temp.next;
        }

        if (temp == head) {
            deleteAtEnd();
        } else {
            temp.prev.next = temp.next;
            temp.next.prev = temp.prev;
        }
    }

    public void search(int data) {
        if (head == null) {
            System.out.println("Not found");
            return;
        }

        Node temp = head;
        do {
            if (temp.data == data) {
                System.out.println("Found");
                return;
            }
            temp = temp.next;
        } while (temp != head);

        System.out.println("Not found");
    }

    public void display() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node temp = head;
        do {
            System.out.print(temp.data + " ");
            temp = temp.next;
        } while (temp != head);
        System.out.println();
    }
}
public class Main {
    public static void main(String[] args) {
        Pranav list = new Pranav();

        list.insertAtEnd(5);
        list.display();

        list.insertAtEnd(8);
        list.insertAtEnd(1);
        list.insertAtEnd(7);
        list.display();

        list.insertAtBeginning(0);
        list.display();

        list.insertAtMiddle(10, 3);
        list.display();

        list.deleteAtBeginning();
        list.display();

        list.deleteAtEnd();
        list.display();

        list.deleteAtMiddle(2);
        list.display();

        list.search(8);
        list.search(100);
    }
}
